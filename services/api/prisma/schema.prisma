generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password_hash      String
  created_at         DateTime           @default(now())
  avatar_url         String?
  display_name       String
  first_name         String?
  last_active_at     DateTime?
  last_name          String?
  phone              String?
  role               String             @default("user")
  subscription_tier  String             @default("free")
  updated_at         DateTime           @updatedAt
  ad_impressions     AdImpression[]
  group_memberships  GroupMember[]
  created_groups     Group[]            @relation("GroupCreator")
  created_items      Item[]             @relation("ItemCreator")
  messages           Message[]          @relation("MessageAuthor")
  notification_logs  NotificationLog[]
  purchases          Purchase[]         @relation("PurchaseCreator")
  push_subscriptions PushSubscription[]
  splits             Split[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  role          String   @default("support")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("admins")
}

model Group {
  id             String         @id @default(uuid())
  name           String
  description    String?
  invite_code    String         @unique
  created_by     String
  created_at     DateTime       @default(now())
  ad_impressions AdImpression[] @relation("GroupAdImpressions")
  members        GroupMember[]
  creator        User           @relation("GroupCreator", fields: [created_by], references: [id])
  items          Item[]
  messages       Message[]
  purchases      Purchase[]

  @@map("groups")
}

model GroupMember {
  user_id   String
  group_id  String
  role      String   @default("member")
  joined_at DateTime @default(now())
  group     Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_id])
  @@map("group_members")
}

model Item {
  id             String         @id @default(uuid())
  name           String
  image_url      String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  category       String?
  created_by     String
  group_id       String
  note           String?
  quantity       String         @default("1")
  status         String         @default("todo")
  creator        User           @relation("ItemCreator", fields: [created_by], references: [id])
  group          Group          @relation(fields: [group_id], references: [id], onDelete: Cascade)
  messages       Message[]      @relation("ItemMessages")
  purchase_items PurchaseItem[]

  @@map("items")
}

model Purchase {
  id                String         @id @default(uuid())
  group_id          String
  purchased_by      String
  total_amount      Int
  currency          String         @default("JPY")
  receipt_image_url String?
  purchased_at      DateTime       @default(now())
  note              String?
  purchase_items    PurchaseItem[]
  group             Group          @relation(fields: [group_id], references: [id], onDelete: Cascade)
  purchaser         User           @relation("PurchaseCreator", fields: [purchased_by], references: [id])
  splits            Split[]

  @@map("purchases")
}

model PurchaseItem {
  purchase_id String
  item_id     String
  quantity    Decimal  @default(1)
  unit_price  Int?
  item        Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
  purchase    Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade)

  @@id([purchase_id, item_id])
  @@map("purchase_items")
}

model Split {
  id           String   @id @default(uuid())
  purchase_id  String
  user_id      String
  share_amount Int
  rule         String
  purchase     Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("splits")
}

model Message {
  id         String   @id @default(uuid())
  group_id   String
  item_id    String?
  author_id  String
  body       String
  image_url  String?
  created_at DateTime @default(now())
  author     User     @relation("MessageAuthor", fields: [author_id], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  item       Item?    @relation("ItemMessages", fields: [item_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model AdCreative {
  id          String         @id @default(uuid())
  title       String
  description String
  image_url   String
  click_url   String
  slot        String
  priority    Int            @default(5)
  status      String         @default("active")
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  impressions AdImpression[]

  @@map("ad_creatives")
}

model AdImpression {
  id          String     @id @default(uuid())
  user_id     String?
  group_id    String?
  slot        String
  creative_id String
  shown_at    DateTime   @default(now())
  creative    AdCreative @relation(fields: [creative_id], references: [id], onDelete: Cascade)
  group       Group?     @relation("GroupAdImpressions", fields: [group_id], references: [id])
  user        User?      @relation(fields: [user_id], references: [id])

  @@map("ads_impressions")
}

model PushSubscription {
  id          String   @id @default(uuid())
  user_id     String
  endpoint    String
  p256dh      String
  auth        String
  device_info Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model NotificationLog {
  id         String    @id @default(uuid())
  user_id    String
  type       String
  title      String
  body       String
  payload    Json?
  sent_at    DateTime  @default(now())
  read_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}
