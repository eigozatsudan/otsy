// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password_hash     String
  phone             String?
  subscription_tier String?  @default("basic") // basic, premium
  first_name        String?
  last_name         String?
  referral_code     String?  @unique
  referred_by       String?
  role              String?  @default("user") // user, shopper, admin
  last_active_at    DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  orders            Order[]
  chats             Chat[]
  chat_messages     ChatMessage[]
  push_subscriptions PushSubscription[]
  subscriptions     Subscription[]
  service_credits   ServiceCredit[]
  shopper_ratings   ShopperRating[]
  notification_logs NotificationLog[]
  notification_preferences NotificationPreferences[]
  shopper_profile   Shopper?
  shopper_orders    Order[] @relation("ShopperOrders")

  @@map("users")
}

model Shopper {
  id          String   @id @default(uuid())
  user_id     String   @unique
  email       String   @unique
  password_hash String
  phone       String
  first_name  String?
  last_name   String?
  kyc_status  String   @default("pending") // pending, approved, needs_review, rejected
  risk_tier   String?  // L0, L1, L2, L-1
  rating_avg  Float?
  rating_count Int     @default(0)
  status      String   @default("active") // active, suspended
  is_online   Boolean  @default(false)
  unavailable_until DateTime?
  unavailability_reason String?
  current_orders Int    @default(0)
  subscription_tier String? @default("basic")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [user_id], references: [id])
  orders        Order[]
  chats         Chat[]
  receipts      Receipt[]
  chat_messages ChatMessage[]
  kyc_documents KycDocument[]
  push_subscriptions PushSubscription[]
  preferences   ShopperPreferences?
  ratings       ShopperRating[]
  order_runs    OrderRun[]
  notification_logs NotificationLog[]
  notification_preferences NotificationPreferences[]

  @@map("shoppers")
}

model Admin {
  id         String   @id @default(uuid())
  email      String   @unique
  password_hash String
  role       String   @default("support") // support, manager, ops
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  audit_logs OrderAuditLog[]

  @@map("admins")
}

// Order Management
model Order {
  id              String   @id @default(uuid())
  user_id         String
  shopper_id      String?
  status          String   @default("new") // new, accepted, shopping, await_receipt_ok, enroute, delivered, cancelled
  mode            String   // approve, delegate
  receipt_check   String   // required, auto
  estimate_amount Int      // JPY
  auth_amount     Int?     // JPY
  deadline_ts     DateTime?
  priority        Float?
  address_json    Json
  notes           String?
  accepted_at     DateTime?
  delivered_at    DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [user_id], references: [id])
  shopper       Shopper?       @relation(fields: [shopper_id], references: [id])
  items         OrderItem[]
  receipts      Receipt[]
  payments      Payment[]
  chats         Chat[]
  chat_messages ChatMessage[]
  audit_logs    OrderAuditLog[]
  ratings       ShopperRating[]
  order_runs    OrderRun[]
  shopper_user  User?          @relation("ShopperOrders", fields: [shopper_id], references: [id], map: "orders_shopper_user_fkey")

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  order_id   String
  name       String
  qty        String
  price      Int?    // JPY
  price_min  Int?    // JPY
  price_max  Int?    // JPY
  allow_subs Boolean @default(true)
  notes      String?
  created_at DateTime @default(now())

  // Relations
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Communication
model Chat {
  id         String   @id @default(uuid())
  order_id   String   @unique
  user_id    String?
  shopper_id String?
  status     String   @default("active") // active, closed
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  order    Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user     User?         @relation(fields: [user_id], references: [id])
  shopper  Shopper?      @relation(fields: [shopper_id], references: [user_id])
  messages ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id             String   @id @default(uuid())
  order_id       String
  chat_id        String
  sender         String   // user, shopper, system
  sender_id      String?  // user_id or shopper_id
  sender_role    String?  // user, shopper, admin
  text           String
  attachment_url String?
  attachment_type String?
  type           String   @default("text") // text, image, system
  content        String?
  metadata       Json?
  read_at        DateTime?
  created_at     DateTime @default(now())

  // Relations
  order    Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  chat     Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [sender_id], references: [id], map: "chat_messages_user_fkey")
  shopper  Shopper? @relation(fields: [sender_id], references: [id], map: "chat_messages_shopper_fkey")

  @@map("chat_messages")
}

// Financial


// KYC and Verification

// Push Notifications

// Audit and Logging
model OrderAuditLog {
  id         String   @id @default(uuid())
  order_id   String
  actor_id   String
  actor_role String   // user, shopper, admin, system
  action     String   // created, accepted, status_updated, payment_authorized, etc.
  payload    Json?
  created_at DateTime @default(now())

  // Relations
  order Order @relation(fields: [order_id], references: [id])
  admin Admin? @relation(fields: [actor_id], references: [id])

  @@map("order_audit_logs")
}

// Service Credits
model ServiceCredit {
  id         String    @id @default(uuid())
  user_id    String
  amount     Int       // JPY
  reason     String    // referral, promotion, refund, etc.
  description String?
  order_id   String?
  metadata   Json?
  used_at    DateTime?
  used_for_order_id String?
  expires_at DateTime?
  created_at DateTime  @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  audit_logs ServiceCreditAuditLog[]

  @@map("service_credits")
}
// Receipt Management
model Receipt {
  id         String   @id @default(uuid())
  order_id   String
  shopper_id String
  image_url  String
  status     String   @default("pending") // pending, approved, rejected
  submitted_at DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  shopper    Shopper  @relation(fields: [shopper_id], references: [id])

  @@map("receipts")
}

// Payment Management
model Payment {
  id                    String   @id @default(uuid())
  order_id              String
  stripe_payment_intent_id String @unique
  stripe_pi             String   @unique
  amount                Int      // JPY
  status                String   @default("pending") // pending, authorized, captured, refunded, failed
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  // Relations
  order                 Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Chat System

// KYC Management
model KycDocument {
  id          String   @id @default(uuid())
  shopper_id  String
  type        String   // identity, address, bank
  kind        String   // id_front, id_back, selfie
  file_url    String
  image_url   String?
  status      String   @default("pending") // pending, approved, rejected
  uploaded_at DateTime @default(now())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  shopper     Shopper  @relation(fields: [shopper_id], references: [id], onDelete: Cascade)

  @@map("kyc_documents")
}

// Notification System
model PushSubscription {
  id         String   @id @default(uuid())
  user_id    String?
  shopper_id String?
  endpoint   String
  p256dh     String
  auth       String
  device_info Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shopper    Shopper? @relation(fields: [shopper_id], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

// Audit Logging

// Subscription Management
model Subscription {
  id              String    @id @default(uuid())
  user_id         String
  tier            String    // basic, premium, enterprise
  status          String    // active, paused, cancelled
  start_date      DateTime
  end_date        DateTime?
  pause_reason    String?
  resume_date     DateTime?
  current_period_start DateTime
  current_period_end   DateTime
  orders_limit         Int      @default(10)
  priority_orders_limit Int     @default(1)
  orders_this_period   Int      @default(0)
  priority_orders_used Int      @default(0)
  preferred_time_slots Json?
  preferred_store_types Json?
  max_delivery_distance Int? @default(10)
  auto_accept_orders Boolean? @default(false)
  metadata Json?
  default_priority     String? @default("standard")
  cancellation_reason  String?
  cancellation_feedback String?
  cancelled_at         DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  audit_logs SubscriptionAuditLog[]
  usages     SubscriptionUsage[]

  @@map("subscriptions")
}

// Shopper Preferences
model ShopperPreferences {
  id         String   @id @default(uuid())
  shopper_id String   @unique
  preferences Json?
  available_time_slots Json?
  preferred_store_types Json?
  max_delivery_distance Int? @default(10)
  max_concurrent_orders Int? @default(3)
  accepts_urgent_orders Boolean? @default(true)
  min_order_value Float? @default(0)
  location_lat Float?
  location_lng Float?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  shopper Shopper @relation(fields: [shopper_id], references: [user_id])

  @@map("shopper_preferences")
}

// Shopper Ratings
model ShopperRating {
  id            String   @id @default(uuid())
  shopper_id    String
  order_id      String   @unique
  user_id       String
  overall_rating Float
  quality_rating Float?
  timeliness_rating Float?
  communication_rating Float?
  accuracy_rating Float?
  comment       String?
  tags          Json?
  created_at    DateTime @default(now())

  // Relations
  shopper Shopper @relation(fields: [shopper_id], references: [user_id])
  order   Order   @relation(fields: [order_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  @@map("shopper_ratings")
}

// Order Run (for matching service)
model OrderRun {
  id         String   @id @default(uuid())
  order_id   String
  shopper_id String
  status     String   // active, completed, cancelled
  rating     Float?
  payment_amount Int?
  total_orders Int?
  started_at DateTime @default(now())
  ended_at   DateTime?
  created_at DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [order_id], references: [id])
  shopper Shopper @relation(fields: [shopper_id], references: [user_id])

  @@map("order_runs")
}

// Notification Log
model NotificationLog {
  id         String   @id @default(uuid())
  user_id    String?
  shopper_id String?
  type       String   // push, email, sms
  title      String
  body       String
  payload    Json?
  sent_at    DateTime @default(now())
  read_at    DateTime?
  created_at DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [user_id], references: [id])
  shopper Shopper? @relation(fields: [shopper_id], references: [user_id])

  @@map("notification_logs")
}

// Notification Preferences
model NotificationPreferences {
  id         String   @id @default(uuid())
  user_id    String?  @unique
  shopper_id String?
  preferences Json?
  order_updates Boolean @default(true)
  chat_messages Boolean @default(true)
  promotional Boolean @default(false)
  system_alerts Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user    User?    @relation(fields: [user_id], references: [id])
  shopper Shopper? @relation(fields: [shopper_id], references: [user_id])

  @@map("notification_preferences")
}

// Subscription Audit Log
model SubscriptionAuditLog {
  id              String   @id @default(uuid())
  subscription_id String
  user_id         String?
  action          String
  actor_id        String?
  old_tier        String?
  new_tier        String?
  details         Json?
  payload         Json?
  created_at      DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@map("subscription_audit_logs")
}

// Service Credit Audit Log
model ServiceCreditAuditLog {
  id         String   @id @default(uuid())
  credit_id  String?
  service_credit_id String?
  user_id    String?
  action     String
  actor_id   String?
  amount     Int?
  details    Json?
  payload    Json?
  created_at DateTime @default(now())

  // Relations
  credit ServiceCredit? @relation(fields: [credit_id], references: [id], onDelete: Cascade)

  @@map("service_credit_audit_logs")
}

// Subscription Usage
model SubscriptionUsage {
  id              String   @id @default(uuid())
  subscription_id String
  user_id         String?
  usage_type      String   // order, priority_order
  usage_date      DateTime
  amount          Int?
  created_at      DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@map("subscription_usages")
}

// Item Categories
model ItemCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?  // Icon name or URL
  color       String?  // Hex color code
  sort_order  Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  items       Item[]

  @@map("item_categories")
}

// Items
model Item {
  id          String   @id @default(uuid())
  category_id String
  name        String
  description String?
  price_min   Int?     // JPY
  price_max   Int?     // JPY
  unit        String?  // 個, 本, パック, etc.
  image_url   String?
  is_active   Boolean  @default(true)
  sort_order  Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  category    ItemCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([name, category_id], name: "name_category")
  @@map("items")
}